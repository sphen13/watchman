#!/bin/bash

# PLUGIN: 	Check Shutdown Cause
# AUTHOR: 	Stephen Boyle @sphen13
# DATE:   	2022-03-13
# VERSION:	0.7

# 2017-02-26	v0.1-0.2
# 2018-10-30	v0.3
#								add shutdown cause description
#								add logic to prevent certain shutdown cause alerts
#								add logic to only warn on certain shutdown causes
# 2019-04-29	v0.4
#								add more shutdown causes
#								exclude more causes from alert reporting (just info)
# 2019-11-13  v0.5
#               remove 1 as alert (seems to be normal T1/T2?)
# 2020-06-08  v0.6
#               remove 7 as alert (seems to be normal T2?)
# 2022-03-13  v0.7
#               fix os version logic for bigsur+ (oops a litte late)

# read prefpane settings & set defaults
settings_plist='/Library/MonitoringClient/PluginSupport/_check_shutdown_cause_settings.plist'

# define shutdown causes - from https://georgegarside.com/blog/macos/shutdown-causes/
shutdownCauseDescription=(
  '7::OS Update? T2? BridgeOS?'
	'5::Correct Shut Down.'
	'3::Power Switch Initiated.'
	'2::Low Battery'
	'0::Power disconnected.'
	'-1::Health Check.'
	'-2::Power Supply Issue.'
	'-3::Multiple temperature sensors exceeded the defined limit.'
	'-20::Kernel Hang.'
	'-30::Temperature Over Limit.'
	'-40::PSWRSMRST.'
	'-60::Low Battery or Bad master directory block (badMDBErr).'
	'-61::Watchdog timer detected unresponsive application, shutting down the system.'
	'-62::Watchdog timer detected unresponsive application, restarting the system.'
	'-70::Palm Rest temperature exceeds limits.'
	'-71::SO-DIMM Memory temperature exceeds limits.'
	'-72::Heatpipe temperature exceeds limits.'
	'-74::Battery temperature exceeds limits.'
	'-75::Communication issue with AC adapter.'
	'-76::Temperature Manual.'
	'-78::Incorrect current value coming from AC adapter.'
	'-79::Incorrect current value coming from battery.'
	'-82::Temperature Skin.'
	'-83::Temperature Skin.'
	'-84::Temperature Backup.'
	'-86::CPU Proximity temperature exceeds limits.'
	'-95::CPU temperature exceeds limits.'
	'-100::Power supply temperature exceeds limits.'
	'-101::LCD temperature exceeds limits.'
	'-102::Overvoltage.'
	'-103::Battery cell under voltage detected.'
	'-127::PMU forced shutdown.'
	'-128::unknown. Possibly RAM related.'
)
# set the shutdown causes we do not want to report
shutdownCauseOK=('5' '7')
# set the shutdown causes we only want to warn on
shutdownCauseWarn=('3' '2' '0' '1' '7' '-1' '-60' '-128')

osVersionMajor=$(sw_vers -productVersion | cut -d. -f1)
osVersionMinor=$(sw_vers -productVersion | cut -d. -f2)
lastBoot=`sysctl kern.boottime | cut -d"}" -f2 | awk '{print $1,$2,$3,$4,$5}'`

# declare function
containsElement () { for e in "${@:2}"; do [[ "$e" = "$1" ]] && return 0; done; return 1; }

if [ ! -f $settings_plist ]; then
	# populate plist with defaults - set firstRun and exit silently
	defaults write "$settings_plist" firstRun -bool true
	defaults write "$settings_plist" PrefPaneVisibility -bool true
	chmod 644 "$settings_plist"
	exit 25
else
	# plist exists... check to see if firstRun - if not - set and exit silently - otherwise continue
	isset=`defaults read "$settings_plist" firstRun 2>/dev/null`
	if [ -z "$isset" ]; then
		defaults write "$settings_plist" firstRun -bool true
		chmod 644 "$settings_plist"
		exit 25
	fi
fi

lastBoot=`date -j -f "%a %b %d %T %Y" "$lastBoot" "+%Y-%m-%d %H:%M:%S"`
thisCheck=`date "+%Y-%m-%d %H:%M:%S"`

# get the last time we did a check - if we have not - set it to the last boot time
isset=`defaults read "$settings_plist" lastCheck 2>/dev/null`
if [ -z "$isset" ]; then
	lastCheck=`date -j -v -1S -f "%Y-%m-%d %H:%M:%S" "$lastBoot" "+%Y-%m-%d %H:%M:%S"`
else
	lastCheck=`defaults read "$settings_plist" lastCheck | awk '{print $1,$2}'`
fi

# get if we need to do a recheck/resubmit... if so set the last check time to last boot time again...
isset=`defaults read "$settings_plist" resendLastBoot 2>/dev/null`
if [ ! -z "$isset" ]; then
	if [ "$isset" -eq "1" ]; then
		lastCheck=`date -j -v -1S -f "%Y-%m-%d %H:%M:%S" "$lastBoot" "+%Y-%m-%d %H:%M:%S"`
	fi
fi
# lets assume to not recheck next run
defaults write "$settings_plist" resendLastBoot -bool false
chmod 644 "$settings_plist"

firstLine=0
badReboot=0
warnReboot=0
lastBootSec=`date -j -f "%Y-%m-%d %H:%M:%S" "$lastBoot" "+%s"`
lastCheckSec=`date -j -f "%Y-%m-%d %H:%M:%S" "$lastCheck" "+%s"`

if [ "$lastCheckSec" -lt "$lastBootSec" ]; then
	# we have had a reboot since last time we checked

	# increment the last check time to now
	defaults write "$settings_plist" lastCheck -date "$thisCheck +0000"
	chmod 644 "$settings_plist"

	if [ "$osVersionMajor" -ge "11" ] || ([ "$osVersionMajor" -eq "10" ] && [ "$osVersionMinor" -ge "12" ]); then
		# set the end date of our log scan to + 5 minutes
		lastBootCheckEnd=`date -j -v +5M -f "%Y-%m-%d %H:%M:%S" "$lastBoot" "+%Y-%m-%d %H:%M:%S"`

		# loop over log entries between the last successful check and lastBootCheckEnd
		while read -r line ; do
			restartReason=`echo "$line" | awk -F')' '{print $NF}' | awk '{print $4}'`
			restartTime=`echo "$line" | awk '{print $1,$2}' | cut -d"." -f1`

			#echo "[$restartTime] - $restartReason"																				# DEBUG

			# log any result other than $shutdownCauseOK - set badReboot variable
			if ! containsElement "$restartReason" "${shutdownCauseOK[@]}"; then
				if [ "$firstLine" -eq "0" ]; then
					echo -e "Abnormal restart detected:\n"
					firstLine=1
				fi
				echo -e "[$restartTime] Shutdown cause $restartReason"
				for index in "${shutdownCauseDescription[@]}" ; do
				  KEY="${index%%::*}"
				  VALUE="${index##*::}"
				  if [ "$KEY" == "$restartReason" ]; then
				    echo -e "-- $VALUE"
				    break
				  fi
				done
				if containsElement "$restartReason" "${shutdownCauseWarn[@]}"; then
					warnReboot=1
				else
					badReboot=1
				fi
			fi
		done < <(log show --style syslog --predicate 'senderImagePath contains[cd] "AppleSMC"' --start "$lastCheck" --end "$lastBootCheckEnd" | egrep shutdown\ cause)
	else
		# 10.11 or earlier...

		# touch a file with the last time we checked - and use -newer
		lastCheckTouch=`date -j -f "%Y-%m-%d %H:%M:%S" "$lastCheck" "+%y%m%d%H%M.%S"`
		touch -t "$lastCheckTouch" /tmp/.check_shutdown_cause

		# set the end date of our log scan to + 5 minutes
		let lastBootCheckEnd=lastBootSec+300

		#echo "checking from $lastCheck -> "; date -j -v +5M -f "%Y-%m-%d %H:%M:%S" "$lastBoot" "+%Y-%m-%d %H:%M:%S"			### DEBUG

		# loop over gz first
		while read -r logFile ; do
			# check each log in reverse order...
			#echo $logFile																									### DEBUG
			while read -r line ; do
				# continue looping if the line is empty or continued from last line...
				if [ "$line" == "" ] ; then continue ; fi
				L_DATE=`echo $line | awk '{print $1,$2,$3}' 2>/dev/null`
				if [ -z "$L_DATE" ] ; then continue ; fi
				L_DATE=`date -j -f "%b %d %T" "$L_DATE" +%s 2>/dev/null`
				if [ -z "$L_DATE" ] ; then continue ; fi

				# skip lines that are before we want
				if (( $lastCheckSec > $L_DATE  )) ; then continue ; fi
				# bingo - lets check for a cause...
				if (( $L_DATE <= $lastBootCheckEnd )) ; then
					#echo "checking line..."																					### DEBUG
					# check if it has Shutdown
					line=`echo "$line" | grep "shutdown cause"`

					if [ ! -z "$line" ]; then
						#echo "$line"																						### DEBUG

						restartReason=`echo "$line" | awk -F'cause: ' '{print $NF}'`
						restartTime=`echo "$line" | awk '{print $1,$2,$3}'`

						# log any result other than $shutdownCauseOK - set badReboot variable
						if ! containsElement "$restartReason" "${shutdownCauseOK[@]}"; then
							if [ "$firstLine" -eq "0" ]; then
								echo -e "Abnormal restart detected:\n"
								firstLine=1
							fi
							echo -e "[$restartTime] Shutdown cause $restartReason"
							for index in "${shutdownCauseDescription[@]}" ; do
							  KEY="${index%%::*}"
							  VALUE="${index##*::}"
							  if [ "$KEY" == "$restartReason" ]; then
							    echo -e "-- $VALUE"
							    break
							  fi
							done
							if containsElement "$restartReason" "${shutdownCauseWarn[@]}"; then
								warnReboot=1
							else
								badReboot=1
							fi
						fi
					fi
				fi
				# skip lines that are newer than we want
				if (( $L_DATE >  $lastBootCheckEnd )) ; then break ; fi
			done < <(gzcat "$logFile" 2>/dev/null)
		done < <(find /var/log -name system.log\*gz -newer /tmp/.check_shutdown_cause -print | tail -r)

		#echo "doing same on reg log..."																						### DEBUG

		# do the same with latest log...
		while read -r line ; do
			# continue looping if the line is empty or continued from last line...
			if [ "$line" == "" ] ; then continue ; fi
			L_DATE=`echo $line | awk '{print $1,$2,$3}' 2>/dev/null`
			if [ -z "$L_DATE" ] ; then continue ; fi
			L_DATE=`date -j -f "%b %d %T" "$L_DATE" +%s 2>/dev/null`
			if [ -z "$L_DATE" ] ; then continue ; fi

			# skip lines that are before we want
			if (( $lastCheckSec > $L_DATE  )) ; then continue ; fi
			# bingo - lets check for a cause...
			if (( $L_DATE <= $lastBootCheckEnd )) ; then

				# check if it has Shutdown
				line=`echo "$line" | grep "shutdown cause"`

				if [ ! -z "$line" ]; then
					#echo "$line"																							### DEBUG

					restartReason=`echo "$line" | awk -F'cause: ' '{print $NF}'`
					restartTime=`echo "$line" | awk '{print $1,$2,$3}'`

					# log any result other than $shutdownCauseOK - set badReboot variable
					if ! containsElement "$restartReason" "${shutdownCauseOK[@]}"; then
						if [ "$firstLine" -eq "0" ]; then
							echo -e "Abnormal restart detected:\n"
							firstLine=1
						fi
						echo -e "[$restartTime] Shutdown cause $restartReason"
						if containsElement "$restartReason" "${shutdownCauseWarn[@]}"; then
							warnReboot=1
						else
							badReboot=1
						fi
					fi
				fi

			fi
			# skip lines that are newer than we want
			if (( $L_DATE >  $lastBootCheckEnd )) ; then break ; fi
		done < /var/log/system.log
	fi

	# check if we identified a bad reboot and exit appropriately
	if [ "$badReboot" -ne "0" ] || [ "$warnReboot" -ne "0" ]; then
		# we had a bad reboot detected - lets see if it was the last occurrence. if it was not, set us to resubmit last reboot status on next run (will clear error)
		if containsElement "$restartReason" "${shutdownCauseOK[@]}" ; then
			defaults write "$settings_plist" resendLastBoot -bool true
			chmod 644 "$settings_plist"
		fi
		# alert if bad reboot, otherwise just warn
		if [ "$badReboot" -ne "0" ]; then
			exit 2
		else
			exit 20
		fi
	fi

	# all good if we got this far - report ok.
	echo "Last Reboot [$lastBoot] OK"
	exit 0
else
	# we have not rebooted since last check - increment the last check time to now
	defaults write "$settings_plist" lastCheck -date "$thisCheck +0000"
	chmod 644 "$settings_plist"
fi

exit 25
