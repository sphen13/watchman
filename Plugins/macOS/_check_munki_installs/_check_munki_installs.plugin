#!/usr/bin/env python3

# PLUGIN:  Munki Installs
# AUTHOR:  Stephen Boyle @sphen13
# DATE:    2022-03-07
# VERSION: 1.3

# 2022-03-07	v1.3
#               - update python shebang + python3
# 2020-06-22	v1.2
#               - add date to install listing
# 2020-05-24	v1.1
#               - add count to ard info
#				- remove debug
# 2019-04-29	v1.0
#				- initial version

import os
import sys
import datetime
import subprocess
from PluginToolkit import writePlist
from PluginToolkit import check_settings

def setARDInfo(value):
    # Set ARD info 4 to value
    kicker='/System/Library/CoreServices/RemoteManagement/ARDAgent.app/Contents/Resources/kickstart'

    ioreg = subprocess.Popen('{} -configure -computerinfo -set4 -4 "{}"'.format(kicker, value),
            stdout=subprocess.PIPE,
            stderr=subprocess.STDOUT,
            shell=True)
    result,stderr = ioreg.communicate()
    return

# read preferences
settings_plist = '/Library/MonitoringClient/PluginSupport/_check_munki_installs_settings.plist'
base_settings = {
    'ignoreInstalls' : '',
    'PrefPaneVisibility' : True,
}
settings = check_settings(base_settings, settings_plist)
writePlist(settings, settings_plist)

ignoreList = []
if settings['ignoreInstalls']:
    # split up the comma delimited strings
    ignoreList = [x.strip() for x in settings['ignoreInstalls'].split(",")]

#print(ignoreList)

# do actual work
start = datetime.datetime.now() - datetime.timedelta(days=30)
end = datetime.datetime.now()

munkiInstalls = '/Library/Managed Installs/Logs/Install.log'
updates = []
updatesDate = []
appleUpdates = []
appleUpdatesDate = []

exists = os.path.isfile(munkiInstalls)
if exists:
    with open(munkiInstalls, 'r') as f:
        for line in f:
            ts=datetime.datetime.strptime(line[:20],'%b %d %Y %H:%M:%S')
            if ts>start and ts<end:
                if 'SUCCESSFUL' in line and 'Removal' not in line:
                    if 'Apple Software Update' in line:
                        currentUpdate=line[60:].split(':')[0]
                        if currentUpdate not in appleUpdates and not any(s in currentUpdate for s in ignoreList):
                            appleUpdates.append(currentUpdate)
                            appleUpdatesDate.append(ts.strftime("%Y-%m-%d"))
                    else:
                        currentUpdate=line[38:].split(':')[0]
                        if currentUpdate not in updates and not any(s in currentUpdate for s in ignoreList):
                            updates.append(currentUpdate)
                            updatesDate.append(ts.strftime("%Y-%m-%d"))

    updatesCount = len(updates)
    appleUpdatesCount = len(appleUpdates)

    print('%d Updates Installed in the last 30 days' % (updatesCount+appleUpdatesCount))
    if updates:
        print('\n%d Software Update(s):' % updatesCount)
        for x,y in zip(updatesDate,updates):
            print(('- [{}] {}'.format(x, y)))
    if appleUpdates:
        print('\n%d System Software Update(s):' % appleUpdatesCount)
        for x,y in zip(appleUpdatesDate,appleUpdates):
            print(('- [{}] {}'.format(x, y)))

    setARDInfo(updatesCount+appleUpdatesCount)

    # we have info to report - do it
    sys.exit(0)

# if we got this far lets not report anything
sys.exit(25)
