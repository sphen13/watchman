#!/usr/bin/python

# PLUGIN:  Malware Detection
# AUTHOR:  Stephen Boyle @sphen13
# DATE:    2021-05-10
# VERSION: 1.4.3

# 2020-06-17	v1.4.3
#				- Fix python datetime issue
# 2020-06-17	v1.4.2
#				- Ignore registration
# 2020-06-10	v1.4.1
#				- Make sure json file has correct permissions
#				- Tweak alert on DetectX Error
#               - Dont mention cycle count when we are sleeping
# 2020-06-09	v1.4
#				- Tweak alert on DetectX Error
#				- Remove sleep debug messages
# 2020-06-08	v1.3.4
#				- Alert on DetectX Error
# 2020-06-08	v1.3.3
#				- Fix sleep predicate for some 10.15
# 2020-06-08	v1.3.2
#				- Account for machine sleeping
#               - Notify on DetectX Error
# 2020-05-18	v1.3.1
#				- Inactivity status - human readable
#               - Print "Good" status for non metadata integrations
#               - Report more often so WM doesnt think we are stale
#               - Check registration status
# 2020-05-17	v1.3
#				- Ignore reports when at loginwindow / inactivity tracking
# 2020-03-19	v1.2.1
#				- Only report stale data after 'StaleRunThreshold' stale runs and 'StaleRunTimeDelta' time has elapsed from last report
# 2020-03-19	v1.2
#				- Limit slow scan notifications to 3+ consecutive slow runs
#               - Fix typos
#               - Add more prefs in the GUI
# 2020-03-17	v1.1
#				- Update reporting because of lack of metadata features
#				- Note: future use of `include_in_warnings` once framework updated
#               - Add preference variables
#               - Report DetectX not running or stale data
#               - Report scans that take too long
# 2020-03-02	v1.0
#				- initial version

import os
import sys
import json
import subprocess
from datetime import datetime
from dateutil import parser
from PluginToolkit import *
from SystemConfiguration import SCDynamicStoreCopyConsoleUser

# read preferences
settings_plist = '/Library/MonitoringClient/PluginSupport/_check_detectx_settings.plist'
base_settings = {
    'PrefPaneVisibility' : True,
    'DetectXLocation'    : '/Applications/Utilities/DetectX Swift.app',
    'LastReport'         : datetime(1984, 01, 24, 0, 0),
    'LastRun'            : datetime.now(),
    'ConsecutiveStale'   : 0,
    'ConsecutiveSlow'    : 0,
    'StaleRunThreshold'  : 3,
    'SlowRunThreshold'   : 2,
    'ScanDurationThresh' : 240,
    'StaleRunTimeDelta'  : 86400
}
settings = check_settings(base_settings, settings_plist)
writePlist(settings, settings_plist)

#def userIdleTime():
    # Get user idle time
#    ioreg = subprocess.Popen("ioreg -c IOHIDSystem | awk '/HIDIdleTime/ {print int($NF/1000000000); exit}'",
#            stdout=subprocess.PIPE,
#            stderr=subprocess.STDOUT,
#            shell=True)
#    idleTime,stderr = ioreg.communicate()

#    return int(idleTime.strip())

#def regStatus():
    # Get registration status
#    command = subprocess.Popen('"{}/Contents/MacOS/DetectX Swift" status'.format(settings['DetectXLocation']),
#            stdout=subprocess.PIPE,
#            stderr=subprocess.STDOUT,
#            shell=True)
#    regStatus,stderr = command.communicate()

#    if len(regStatus.strip().split('\n')) > 1:
#        return "Error"

#    return regStatus.strip()

#def powerState():
    # Get power state
#    command = subprocess.Popen('pmset -g systemstate | grep "Power State" | cut -d ":" -f2',
#            stdout=subprocess.PIPE,
#            stderr=subprocess.STDOUT,
#            shell=True)
#    powerState,stderr = command.communicate()

#    return int(powerState.strip())

#def recentSleepEvents(lines):
    # Get recent sleep events
#    executeMe = "pmset -g log | egrep '\\b(Sleep|Wake|Start)\s{2,}'"
#    command = subprocess.Popen('{} | tail -{}'.format(executeMe, lines),
#            stdout=subprocess.PIPE,
#            stderr=subprocess.STDOUT,
#            shell=True)
#    sleepEvents,stderr = command.communicate()

#    return sleepEvents

def sleepEvents(startDate):
    # Return whether we have experienced sleep events since startDate
    command = subprocess.Popen("log show --style syslog --predicate 'processImagePath CONTAINS[c] \"kernel\" && eventMessage BEGINSWITH \"PMRD\" && eventMessage ENDSWITH \" Sleep\"' --start \"{}\" | egrep kernel".format(startDate.strftime("%Y-%m-%d %H:%M:%S")),
            stdout=subprocess.PIPE,
            stderr=subprocess.STDOUT,
            shell=True)
    sleepEventDetail,stderr = command.communicate()

    return sleepEventDetail

# do actual work
detectx_plist = '/usr/local/munkireport/preflight.d/cache/detectx.json'
exitStatus = 0

# is anyone logged in?
userLoggedIn = (SCDynamicStoreCopyConsoleUser(None, None, None) or [None])[0]
userLoggedIn = [userLoggedIn,""][userLoggedIn in [u"loginwindow", None, u""]]

if os.path.isfile(detectx_plist):
    with open(detectx_plist, 'r') as f:
        data = json.load(f)

    # check and fix permissions
    jsonPerms = os.stat(detectx_plist)
    if str(oct(jsonPerms.st_mode)[-3:]) != "777":
        os.chmod(detectx_plist, 0o777)
    jsonPerms = os.stat(os.path.dirname(detectx_plist))
    if str(oct(jsonPerms.st_mode)[-3:]) != "777":
        os.chmod(os.path.dirname(detectx_plist), 0o777)

    if data['searchdate']:
        searchdate = parser.parse(data['searchdate']).replace(tzinfo=None)
        results = ""

        # setup reporter and report information - even though we may have last time!
        reporter = Reporter()

        if data['infections']:
            exitStatus = 2
            results = '{} Infection(s) Found:\n'.format(len(data['infections']))
            results = results + '\n'.join("{}".format(item) for item in data['infections']) + '\n'
            reporter.add_metadata(
                identifier           = 'detectx_infections',
                name                 = '{} Infection(s) Found'.format(len(data['infections'])),
                datatype             = 'string',
                value                = '\n'.join("{}".format(item) for item in data['infections']),
                visible              = True
            )

        if data['issues']:
            exitStatus = 2
            if results != "":
                results = results + '\n'
            results = '{}{} Issue(s) Found:\n'.format(results,len(data['issues']))
            results = results + '\n'.join("{}".format(item) for item in data['issues']) + '\n'
            reporter.add_metadata(
                identifier           = 'detectx_issues',
                name                 = '{} Issue(s) Found'.format(len(data['issues'])),
                datatype             = 'string',
                value                = '\n'.join("{}".format(item) for item in data['issues']),
                visible              = True
            )
            reporter.add_metadata(
                identifier           = 'detectx_issues_remediation',
                name                 = 'Issue Remediation Command',
                datatype             = 'string',
                value                = '\n'.join("rm -rf \"{}\"".format(item) for item in data['issues'])
            )

        reporter.add_metadata(
            identifier           = 'detectx_searchdate',
            name                 = 'Scan Date',
            datatype             = 'string',
            value                = searchdate.strftime("%m/%d/%Y, %H:%M:%S"),
            visible              = True
        )

        if data['duration']:
            if data['duration'] > settings['ScanDurationThresh']:
                # Scans are taking too long
                if searchdate > settings['LastReport']:
                    # we have new data - increment slow counter
                    settings['ConsecutiveSlow'] += 1
                results = results + '\nMalware scan took {} seconds to complete. This is abnormally long. You may want to check periodic scanner configuration or the client machine.\n'.format(data['duration'])
                if settings['ConsecutiveSlow'] > settings['SlowRunThreshold']:
                    # report
                    exitStatus = 2
                else:
                    # warn
                    exitStatus = 20
            else:
                settings['ConsecutiveSlow'] = 0

            reporter.add_metadata(
                identifier           = 'detectx_duration',
                name                 = 'Scan Duration',
                datatype             = 'string',
                value                = data['duration']
            )

        if data['version']:
            reporter.add_metadata(
                identifier           = 'detectx_version',
                name                 = 'Malware Scanner Version',
                datatype             = 'string',
                value                = data['version']
            )

        #registrationStatus = regStatus()
        #reporter.add_metadata(
        #    identifier           = 'detectx_registration',
        #    name                 = 'Registration Status',
        #    datatype             = 'string',
        #    value                = registrationStatus
        #)
        #if registrationStatus is "Error":
        #    if exitStatus is 0:
                # warn
        #        exitStatus = 20

        if searchdate > settings['LastReport']:
            # we have newer data than last run
            settings['ConsecutiveStale'] = 0
            settings['LastReport'] = searchdate
            settings['LastRun'] = datetime.now()

            # write out updated settings file
            writePlist(settings, settings_plist)

            # we have info to report - do it
            if exitStatus is 0:
                print('[{}] All Clean'.format(searchdate.strftime("%Y-%m-%d %H:%M:%S")))
            else:
                print(results)
            sys.exit(exitStatus)
        else:
            # we do not have newer data since last run
            #if registrationStatus is "Error":
                # alert
            #    exitStatus = 2
            #    print("DetectX Error\n")

            sleepEventDetail = sleepEvents(settings['LastRun'])
            if userLoggedIn and not sleepEventDetail:
                # we are not at login window and have not logged sleep events - lets mark as stale run
                settings['ConsecutiveStale'] += 1
                cycleNotice = '{} reporting cycles and '.format(settings['ConsecutiveStale'])

            if settings['ConsecutiveStale'] > settings['StaleRunThreshold']:
                # have we also been stale for 24+ hours?
                if (datetime.now() - parser.parse(data['searchdate']).replace(tzinfo=None)).total_seconds() > settings['StaleRunTimeDelta']:
                    # report stale run
                    exitStatus = 2

            sleepNotice = ""
            if sleepEventDetail:
                sleepNotice = "Machine has been sleeping. "

            print('[{}] {}No updated stats seen during the last {}and {} hours.'.format(datetime.now().strftime("%Y-%m-%d %H:%M:%S"),sleepNotice,cycleNotice,round((datetime.now() - parser.parse(data['searchdate']).replace(tzinfo=None)).total_seconds()/3600)))
            # output our results as normal
            if results is not "":
                print('\n{}'.format(results))
            else:
                print('\n[{}] All Clean\n'.format(searchdate.strftime("%Y-%m-%d %H:%M:%S")))

            # diag info
            #print('User Idle Time: {} min'.format(userIdleTime()/60))
            #print('Power State: {}'.format(powerState()))
            #if sleepEventDetail:
            #    print('Recent Sleep Events:')
            #    print(sleepEventDetail)
            #print(recentSleepEvents(10))

            settings['LastRun'] = datetime.now()
            # write out updated settings file
            writePlist(settings, settings_plist)
            sys.exit(exitStatus)
else:
    if os.path.isdir(settings['DetectXLocation']):
        # we have detectx installed but no report
        exitStatus = 20

        print('[{}] Malware scanner is present but is not reporting. Please check periodic scanner configuration.'.format(datetime.now().strftime("%Y-%m-%d")))
        sys.exit(exitStatus)


# if we got this far lets not report anything
sys.exit(25)
