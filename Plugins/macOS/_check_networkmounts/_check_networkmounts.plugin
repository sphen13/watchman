#!/usr/bin/env python3

# PLUGIN:  Check Network Mounts
# AUTHOR:  Stephen Boyle @sphen13
# DATE:    2022-03-07
# VERSION: 1.1.1

# 2021-01-07    v0.1
#                - initial version
# 2021-01-11    v0.2
#                - fix grep to catch nfs
# 2021-01-12    v1.0
#                - disable plugin if no watchpaths
#                - translate %20 to space
# 2021-01-28    v1.1
#                - by default alert each time we check for an unmounted volume
# 2022-03-07    v1.1.1
#                - update python shebang + python3

import sys
import subprocess
#sys.path.insert(1, '/Library/MonitoringClient/Modules')  # For testing outside WM enviro
from PluginToolkit import *

# ------------------------------------------------------------------------------
# FUNCTIONS
# ------------------------------------------------------------------------------

def getNetworkMounts():
    # Build list containing current mounts

    cmd = "/sbin/mount | /usr/bin/grep '//\|:/' | /usr/bin/awk '{print $1}'"
    mountCmd = subprocess.Popen(cmd, shell=True, stdout=subprocess.PIPE, stderr=subprocess.STDOUT)
    rawMounts, stderr = mountCmd.communicate()

    mounts = rawMounts.replace('%20',' ').splitlines()

    return mounts

# ------------------------------------------------------------------------------

# read preferences
settings_plist = '/Library/MonitoringClient/PluginSupport/_check_networkmounts_settings.plist'
base_settings = {
    'networkMountWatchPaths' : '',
    'alreadyAlerted' : 0,
    'sendRepeatedAlerts' : True,
    'Initially_Disabled' : False,
    'PrefPaneVisibility' : True,
}
settings = check_settings(base_settings, settings_plist)

# Set plugin to be disabled if no watchpaths
if not settings['networkMountWatchPaths']:
    Log.write('Disabling plugin ...')
    reporter = Reporter()
    reporter.add_attribute('disable', '_check_networkmounts.plugin')
    settings['Initially_Disabled'] = True
    writePlist(settings, settings_plist)
    sys.exit(25)

# Set up our internal variables
watchPaths = [x.strip() for x in settings['networkMountWatchPaths'].split('|')]
mounts = getNetworkMounts()
exitStatus = 25

# start checking and reporting

# do our mount checks
for mountPoint in watchPaths:
    if not any(mountPoint in s for s in mounts):
        # process for repeated alerts
        if settings['alreadyAlerted'] > 0 and settings['sendRepeatedAlerts']:
            exitStatus = 200
        else:
            exitStatus = 2

        settings['alreadyAlerted'] += 1
        writePlist(settings, settings_plist)

        print((mountPoint + ' is missing'))

# if we didnt find anything bad lets exit OK
if exitStatus == 25:
    # clear alreadyAlertted
    if not settings['alreadyAlerted'] == 0:
        settings['alreadyAlerted'] = 0
        writePlist(settings, settings_plist)
    exitStatus = 0

sys.exit(exitStatus)
