#!/bin/bash

# PLUGIN: Swap
# AUTHOR: Stephen Boyle @sphen13
# DATE:   2020-03-27

# 2017-02-26: v0.2
# 2019-11-29: v0.3
#               add output listing top 5 processes by memory usage
# 2020-03-27: v1.0
#               more useful output

# set defaults
pluginName="_check_swap"
warningThreshold=50
alertThreshold=62

settings_plist="/Library/MonitoringClient/PluginSupport/"$pluginName"_settings.plist"
clientSettings="/Library/MonitoringClient/ClientSettings.plist"
PlistBuddy="/usr/libexec/PlistBuddy"

if [ ! -f $settings_plist ]; then
	# populate plist with defaults
	defaults write "$settings_plist" warningThreshold $warningThreshold
	defaults write "$settings_plist" alertThreshold $alertThreshold
	defaults write "$settings_plist" PrefPaneVisibility -bool true
	defaults write "$settings_plist" Initially_Disabled -bool true
	chmod 644 "$settings_plist"

	#server check
	serverCheck=`ps -ax | grep -e "com.apple.serverd" -e "servermgrd" -e "fmserver" -e "4D.app" -e "LightSpeed Server" -e "MPServerDaemon" | grep -v grep`
	if [ ! -z "$serverCheck" ]; then
		defaults write "$settings_plist" Initially_Disabled -bool false
		chmod 644 "$settings_plist"
	else
		isDisabled=`"$PlistBuddy" -c "Print :PluginsDisabled" "$clientSettings" | grep "$pluginName"`
		if [ -z "$isDisabled" ]; then
			"$PlistBuddy" -c "Add :PluginsDisabled: string $pluginName.plugin" "$clientSettings"
		fi
	fi
	exit 25
else
	# plist exists - lets check for each value
	isset=`defaults read "$settings_plist" warningThreshold 2>/dev/null`
	if [ -z "$isset" ]; then
		defaults write "$settings_plist" warningThreshold $warningThreshold
		chmod 644 "$settings_plist"
	fi
	isset=`defaults read "$settings_plist" alertThreshold 2>/dev/null`
	if [ -z "$isset" ]; then
		defaults write "$settings_plist" alertThreshold $alertThreshold
		chmod 644 "$settings_plist"
	fi
fi

# set our variables
warningThreshold=`defaults read "$settings_plist" warningThreshold`
alertThreshold=`defaults read "$settings_plist" alertThreshold`
totalMemory=`sysctl hw.memsize | awk '{print $2}'`
let totalMemory=$totalMemory/1048576
let warningThresholdMB=$totalMemory*$warningThreshold/100
let alertThresholdMB=$totalMemory*$alertThreshold/100

swapUsed=`sysctl vm.swapusage | awk '{print substr($7, 0, length($7)-1)}' | cut -d'.' -f1`

exitStatus=0
statusMessage="OK"
processDetail=""

if [ "$swapUsed" -ge "$warningThresholdMB" ]; then
  exitStatus=20
  statusMessage="high"

  topProcesses=`top -l 1 -o CMPRS -n 5 -ncols 9 -S -stats pid,cpu,time,mem,cmprs,command`
  processList=0

  while IFS= read -r line; do
    if [ $processList == 0 ]; then
      if [[ $line = VM:* ]]; then
        processDetail="\n\n${line}"
      elif [[ $line = PID* ]]; then
        processList=1
        processDetail="${processDetail}\n"
      fi
    else
      PID=$(echo "$line" | awk '{print $1}')
      CPU=$(echo "$line" | awk '{print $2}')
      CPUTIME=$(echo "$line" | awk '{print $3}')
      MEM=$(echo "$line" | awk '{print $4}')
      CMEM=$(echo "$line" | awk '{print $5}')
      PROCESS=$(echo "$line" | awk '{$1=$2=$3=$4=$5=""; print $0}')

      processDetail="${processDetail}\n$PROCESS ($PID):"
      processDetail="${processDetail}\n-   CPU:\t$CPU"
      processDetail="${processDetail}\n-  TIME:\t$CPUTIME"
      processDetail="${processDetail}\n-   MEM:\t$MEM ($CMEM Compressed)"
    fi
  done <<< "$topProcesses"

  if [ "$swapUsed" -ge "$alertThresholdMB" ]; then
    exitStatus=2
    statusMessage="too high"
  fi
fi

echo -e "Swap memory usage $statusMessage.\n\nTotal Memory: $totalMemory MB\nWarning Threshold: $warningThreshold%\nAlert Threshold: $alertThreshold%\nSwap Used: $swapUsed MB"
echo -e "<tt>$processDetail</tt>"
exit $exitStatus
